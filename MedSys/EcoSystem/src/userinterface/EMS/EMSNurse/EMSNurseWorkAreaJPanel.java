/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.EMS.EMSNurse;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.EMSManagerOrganization;
import Business.Organization.EMSNurseOrganization;
import Business.Organization.Organization;
import Business.Organization.OrganizationDirectory;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.BloodrequestToBBfromEMS;
import Business.WorkQueue.EMSNurseWorkRequest;
import Business.WorkQueue.TransportWorkRequest;
import Business.WorkQueue.WorkRequest;
import static Logger.Logger.logger;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.time.LocalDateTime;
import java.util.logging.Level;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.EMS.EMSNurse.ProcessEMSNurseWorkRequestJPanel;

/**
 *
 * @author admin
 */
public class EMSNurseWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form EMSNurseWorkAreaKJPanel
     */
    private JPanel userProcessContainer;
    private OrganizationDirectory organizationDirectory;
    private Organization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private EcoSystem ecosystem;

    public EMSNurseWorkAreaJPanel(JPanel userProcessContainer, UserAccount userAccount, Organization organization, Enterprise enterprise, EcoSystem ecosystem) {
        logger.log(Level.INFO, "EMSNurseWorkAreaJPanel");

        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.organizationDirectory = enterprise.getOrganizationDirectory();
        this.enterprise = enterprise;
        this.userAccount = userAccount;
        this.ecosystem = ecosystem;
        valueLabel.setText(enterprise.getName());
        populatetable();
        populatetable1();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        manageEnt = new javax.swing.JLabel();
        enterpriseLabel = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();
        refreshJButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblNurse = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        btnProcess = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        bbTable = new javax.swing.JTable();
        manageEnt1 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        manageEnt.setFont(new java.awt.Font("Tamil MN", 1, 18)); // NOI18N
        manageEnt.setText("EMERGENCY REQUESTS");
        add(manageEnt, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 10, -1, -1));

        enterpriseLabel.setFont(new java.awt.Font("Tamil MN", 1, 18)); // NOI18N
        enterpriseLabel.setText("EnterPrise :");
        add(enterpriseLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 50, 127, 30));

        valueLabel.setText("<value>");
        add(valueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 50, 90, 26));

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        add(refreshJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 80, -1, -1));

        tblNurse.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Name", "Message", "Request DateTime", "Raised by", "Assigned to", "Status"
            }
        ));
        jScrollPane1.setViewportView(tblNurse);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 116, 820, 185));

        assignJButton.setText("Assign to me ");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });
        add(assignJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 310, -1, -1));

        btnProcess.setText("Process");
        btnProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessActionPerformed(evt);
            }
        });
        add(btnProcess, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 310, -1, -1));

        bbTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Requested Nurse", "Patient Name", "Blood Group", "Required Units", "Requested Status"
            }
        ));
        jScrollPane2.setViewportView(bbTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 392, 820, 150));

        manageEnt1.setFont(new java.awt.Font("Tamil MN", 1, 14)); // NOI18N
        manageEnt1.setText("SCHEDULED NURSE REQUESTS TO BLOODBANK");
        add(manageEnt1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 360, -1, -1));
    }// </editor-fold>//GEN-END:initComponents



    void populatetable() {
        logger.log(Level.INFO, "populatetable --EMSNurseWorkAreaJPanel");

        DefaultTableModel dtm = (DefaultTableModel) tblNurse.getModel();
        dtm.setRowCount(0);

        if (!organization.getWorkQueue().getWorkRequestList().isEmpty()) {
            for (WorkRequest workrequest : organization.getWorkQueue().getWorkRequestList()) {
                if (workrequest.getClass().getName().contains("EMSNurseWorkRequest")) {

                    Object row[] = new Object[6];
                    row[0] = ((EMSNurseWorkRequest) workrequest);
                    row[1] = ((EMSNurseWorkRequest) workrequest).getMessage();
                    row[2] = ((EMSNurseWorkRequest) workrequest).getTime();
                    row[3] = ((EMSNurseWorkRequest) workrequest).getSender().getEmployee().getName();
                    try {
                        row[4] = ((EMSNurseWorkRequest) workrequest).getReceiver().getEmployee().getName();
                    } catch (NullPointerException e) {
                        row[4] = "No assignee yet";
                    }
                    row[5] = ((EMSNurseWorkRequest) workrequest).getStatus();

                    dtm.addRow(row);
                }
            }
        }
    }

    void populatetable1() {
        logger.log(Level.INFO, "populatetable1 --EMSNurseWorkAreaJPanel");

        DefaultTableModel dtm = (DefaultTableModel) bbTable.getModel();
        dtm.setRowCount(0);

        for (WorkRequest wq : userAccount.getWorkQueue().getWorkRequestList()) {
            if (wq.getClass().getName().contains("BloodrequestToBBfromEMS")) {
                Object row[] = new Object[5];

                row[0] = ((BloodrequestToBBfromEMS) wq).getSender();
                row[1] = ((BloodrequestToBBfromEMS) wq).getPatientName();
                row[2] = ((BloodrequestToBBfromEMS) wq).getBloodGroup();
                row[3] = ((BloodrequestToBBfromEMS) wq).getReqUnits();
                row[4] = ((BloodrequestToBBfromEMS) wq).getStatus();
                dtm.addRow(row);
            }
        }
    }

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        // populatetransportRequestTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed
        logger.log(Level.INFO, "assignJButtonActionPerformed --EMSNurseWorkAreaJPanel");

        int selectedRow = tblNurse.getSelectedRow();
        int rowCount = tblNurse.getSelectedRowCount();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (rowCount > 1) {
            JOptionPane.showMessageDialog(null, "Please select only one row", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        WorkRequest wq = (WorkRequest) tblNurse.getValueAt(selectedRow, 0);
        //        if(wq.getReceiver()!=null){
        //        JOptionPane.showMessageDialog(null, "Request has been processed earlier","warning",JOptionPane.WARNING_MESSAGE);
        //        return;
        //        }

        if (wq.getStatus().equals("Completed")) {
            JOptionPane.showMessageDialog(null, "Request has been processed earlier", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (wq.getReceiver() != null) {
            JOptionPane.showMessageDialog(null, "Request has been processed earlier or already in-progress!", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        for (WorkRequest workrequest : organization.getWorkQueue().getWorkRequestList()) {
            if (workrequest.getClass().getName().contains("EMSNurseWorkRequest")) {
                if (!workrequest.getStatus().isEmpty() && workrequest.getStatus().equals("In Progress") && workrequest.getReceiver().equals(userAccount)) {
                    JOptionPane.showMessageDialog(null, "please complete earlier task", "warning", JOptionPane.WARNING_MESSAGE);
                    return;
                }

            }
        }

        if (wq.getStatus().equals("Pending")) {
            wq.setReceiver(userAccount);
            wq.setStatus(EMSNurseWorkRequest.REQUEST_PROCESSING);
            wq.setTime(LocalDateTime.now());
            populatetable();
            JOptionPane.showMessageDialog(null, "The request is now assigned to you! Kindly process it");
        }
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessActionPerformed
        logger.log(Level.INFO, "btnProcessActionPerformed --EMSNurseWorkAreaJPanel");
        int selectedRow = tblNurse.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        EMSNurseWorkRequest nurse = (EMSNurseWorkRequest) tblNurse.getValueAt(selectedRow, 0);
        if (nurse.getStatus().equalsIgnoreCase("Completed") && !nurse.getReceiver().equals(userAccount)) {
            JOptionPane.showMessageDialog(null, "Request has been processed earlier", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (nurse.getStatus().equals("Completed")) {
            JOptionPane.showMessageDialog(null, "Request has been processed earlier", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (nurse.getReceiver() == null) {
            JOptionPane.showMessageDialog(null, "Please assign the request first", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (nurse.getStatus().equals("Pending")) {
            JOptionPane.showMessageDialog(null, "Please assign and process the request", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (nurse.getStatus().equalsIgnoreCase("In Progress") || nurse.getStatus().equalsIgnoreCase("Completed")) {
            if (nurse.getReceiver() != userAccount) {
                JOptionPane.showMessageDialog(null, "Request has been processed earlier!", "warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            nurse.setStatus(EMSNurseWorkRequest.REQUEST_PROCESSING);
            nurse.setTime(LocalDateTime.now());
            nurse.setReceiver(userAccount);
            ProcessEMSNurseWorkRequestJPanel nursewr = new ProcessEMSNurseWorkRequestJPanel(userProcessContainer, userAccount, nurse, ecosystem, enterprise);
            userProcessContainer.add("ProcessEMSNurseWorkRequestJPanel", nursewr);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
    }//GEN-LAST:event_btnProcessActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JTable bbTable;
    private javax.swing.JButton btnProcess;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel manageEnt;
    private javax.swing.JLabel manageEnt1;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JTable tblNurse;
    private javax.swing.JLabel valueLabel;
    // End of variables declaration//GEN-END:variables

}
