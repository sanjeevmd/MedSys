/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.EMS.EMSDriver;

import Business.EMSPatient.EMSPatient;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.DoctorOrganization;
import Business.Organization.EMSManagerOrganization;
import Business.Organization.Organization;
import Business.Organization.OrganizationDirectory;
import Business.UserAccount.UserAccount;
import Business.Vehicle.Vehicle;
import Business.Vehicle.VehicleInformationList;
import Business.WorkQueue.MsgfromNurseToHospWorkRequest;
import Business.WorkQueue.TransportWorkRequest;
import Business.WorkQueue.WorkQueue;
import Business.WorkQueue.WorkRequest;
import static Logger.Logger.logger;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.time.LocalDateTime;
import java.util.logging.Level;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.EMS.EMSManager.ScheduleEmergencyServiceJPanel;

/**
 *
 * @author admin
 */
public class DriverWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form DriverWorkAreaJPanel
     */
    private JPanel userProcessContainer;
    private Organization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private OrganizationDirectory organizationDirectory;
    private VehicleInformationList vehicleInformationlist;
    private Vehicle vehicle;
    private EcoSystem ecosystem;
    private EMSPatient emsPatient;
    private Network network;

    public DriverWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise, EcoSystem ecosystem) {
        logger.log(Level.INFO, "DriverWorkAreaJPanel");

        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.organization = organization;
        this.organizationDirectory = enterprise.getOrganizationDirectory();
        this.enterprise = enterprise;
        this.vehicleInformationlist = enterprise.getVehicleInformationList();
        this.ecosystem = ecosystem;
        this.network = network;
        valueLabel.setText(enterprise.getName());
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        manageEnt = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTransport = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();
        btnComplete = new javax.swing.JButton();
        enterpriseLabel = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        manageEnt.setFont(new java.awt.Font("Tamil MN", 1, 18)); // NOI18N
        manageEnt.setText("EMERGENCY REQUESTS");
        add(manageEnt, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 10, 253, -1));

        tblTransport.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Name", "ContactNo", "Source", "Destination", "VehicleNo", "Request DateTime", "Raised by", "Assigned to", "Status"
            }
        ));
        jScrollPane1.setViewportView(tblTransport);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 820, 185));

        assignJButton.setText("Assign to me & Process");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });
        add(assignJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 320, -1, -1));

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        add(refreshJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 100, -1, -1));

        btnComplete.setText("Complete");
        btnComplete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompleteActionPerformed(evt);
            }
        });
        add(btnComplete, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 320, 90, -1));

        enterpriseLabel.setFont(new java.awt.Font("Tamil MN", 1, 18)); // NOI18N
        enterpriseLabel.setText("EnterPrise :");
        add(enterpriseLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 50, 127, 30));

        valueLabel.setText("<value>");
        add(valueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 50, 60, 26));
    }// </editor-fold>//GEN-END:initComponents


    private void populateTable() {
        logger.log(Level.INFO, "populateTable --DriverWorkAreaJPanel");

        DefaultTableModel dtm = (DefaultTableModel) tblTransport.getModel();
        dtm.setRowCount(0);

        if (!organization.getWorkQueue().getWorkRequestList().isEmpty()) {
            for (WorkRequest workrequest : organization.getWorkQueue().getWorkRequestList()) {
                if (workrequest.getClass().getName().contains("TransportWorkRequest")) {

                    Object row[] = new Object[9];
                    row[0] = ((TransportWorkRequest) workrequest);
                    row[1] = ((TransportWorkRequest) workrequest).getEMSPatient().getContactNo();
                    row[2] = ((TransportWorkRequest) workrequest).getEMSPatient().getSource();
                    row[3] = ((TransportWorkRequest) workrequest).getEMSPatient().getDestination();
                    row[4] = ((TransportWorkRequest) workrequest).getVehicle().getVehicleNo();
                    row[5] = ((TransportWorkRequest) workrequest).getTime();
                    row[6] = ((TransportWorkRequest) workrequest).getSender().getEmployee().getName();
                    try {
                        row[7] = ((TransportWorkRequest) workrequest).getReceiver().getEmployee().getName();
                    } catch (NullPointerException e) {
                        row[7] = "No assignee yet";
                    }
                    row[8] = ((TransportWorkRequest) workrequest).getStatus();
                    dtm.addRow(row);
                }
            }
        }
    }

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed
        logger.log(Level.INFO, "assignJButtonActionPerformed --DriverWorkAreaJPanel");

        int selectedRow = tblTransport.getSelectedRow();
        int rowCount = tblTransport.getSelectedRowCount();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (rowCount > 1) {
            JOptionPane.showMessageDialog(null, "Please select only one row", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        WorkRequest wq = (WorkRequest) tblTransport.getValueAt(selectedRow, 0);

        if (wq.getStatus().equals("Completed")) {
            JOptionPane.showMessageDialog(null, "Request has been processed earlier", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (wq.getReceiver() != null) {
            JOptionPane.showMessageDialog(null, "Request has been processed earlier!", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        for (WorkRequest workrequest : organization.getWorkQueue().getWorkRequestList()) {
            if (workrequest.getClass().getName().contains("TransportWorkRequest")) {
                if (!workrequest.getStatus().isEmpty() && workrequest.getStatus().equals("In Progress") && workrequest.getReceiver().equals(userAccount)) {
                    JOptionPane.showMessageDialog(null, "please complete earlier task", "warning", JOptionPane.WARNING_MESSAGE);
                    return;
                }

            }
        }

        if (wq.getStatus().equals("Pending")) {
            wq.setReceiver(userAccount);
            wq.setStatus(TransportWorkRequest.REQUEST_PROCESSING);
            wq.setTime(LocalDateTime.now());
            populateTable();
            JOptionPane.showMessageDialog(null, "The request is now assigned to you! Kindly process it");
        }

    }//GEN-LAST:event_assignJButtonActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        logger.log(Level.INFO, "refreshJButtonActionPerformed --DriverWorkAreaJPanel");

        populateTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void btnCompleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompleteActionPerformed
        // TODO add your handling code here:
        logger.log(Level.INFO, "btnCompleteActionPerformed --DriverWorkAreaJPanel");

        int selectedRow = tblTransport.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int rowCount = tblTransport.getSelectedRowCount();
        if (rowCount > 1) {
            JOptionPane.showMessageDialog(null, "Please select only one row", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        TransportWorkRequest transport = (TransportWorkRequest) tblTransport.getValueAt(selectedRow, 0);
        //if(transport.getReceiver()==null)

        if (transport.getStatus().equalsIgnoreCase("Completed") && !transport.getReceiver().equals(userAccount)) {
            JOptionPane.showMessageDialog(null, "Request has been processed earlier", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (transport.getReceiver() == null) {
            JOptionPane.showMessageDialog(null, "Please assign the request first", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (transport.getStatus().equalsIgnoreCase("In Progress") || transport.getStatus().equalsIgnoreCase("Pending")) {
            if (transport.getReceiver() != userAccount) {
                JOptionPane.showMessageDialog(null, "Request has been processed earlier!", "warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        if (transport.getStatus().equals("Pending")) {
            JOptionPane.showMessageDialog(null, "Please assign and process the request", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        transport.setStatus(TransportWorkRequest.REQUEST_COMPLETED);
        transport.setTime(LocalDateTime.now());
        transport.setReceiver(userAccount);
        transport.setMessage("Patient has been brought to the Hospital");
        transport.getVehicle().setAvailable(true);
        populateTable();
        JOptionPane.showMessageDialog(null, "Thank you!");

        for (Network network : ecosystem.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise.getEnterpriseType() == Enterprise.EnterpriseType.Hospital && (transport.getReceiverEnterprise() == enterprise)) {
                    enterprise.getWorkQueue().getWorkRequestList().add(transport);
                    break;

                }
            }
        }
    }//GEN-LAST:event_btnCompleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JButton btnComplete;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel manageEnt;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JTable tblTransport;
    private javax.swing.JLabel valueLabel;
    // End of variables declaration//GEN-END:variables
}
