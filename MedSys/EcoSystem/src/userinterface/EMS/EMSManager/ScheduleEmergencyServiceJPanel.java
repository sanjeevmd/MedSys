/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.EMS.EMSManager;

import userinterface.EMS.EMSManager.EMSManagerJPanel;
import Business.EMSPatient.EMSPatient;
import Business.EMSPatient.EMSPatientDirectory;
import Business.Enterprise.Enterprise;

import Business.Organization.DriverOrganization;
import Business.Organization.EMSNurseOrganization;
import Business.Organization.Organization;
import Business.Patients.Patient;
import Business.UserAccount.UserAccount;
import Business.Vehicle.Vehicle;
import Business.Vehicle.VehicleInformationList;
import Business.WorkQueue.EMSNurseWorkRequest;
import Business.WorkQueue.TransferRequest;
import Business.WorkQueue.TransportWorkRequest;
import Business.WorkQueue.WorkRequest;
import static Logger.Logger.logger;
import com.sun.glass.events.KeyEvent;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.KeyAdapter;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author admin
 */
public class ScheduleEmergencyServiceJPanel extends javax.swing.JPanel {

    /**
     * Creates new form EmergencyActionJPanel
     */
    private JPanel userProcessContainer;
    private Organization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private VehicleInformationList vehicleInformationList;
    private Vehicle vehicle;
    private EMSPatientDirectory EMSPatientDirectory;
    private EMSPatient EMSPatient;
    private int flag = 0;
    private Patient patientToTransfer;
    private Enterprise toEnterprise;

    ScheduleEmergencyServiceJPanel(JPanel userProcessContainer, UserAccount userAccount, Enterprise enterprise, EMSPatientDirectory EMSPatientDirectory, EMSPatient EMSPatient, Organization organization, Vehicle vehicle) {
        logger.log(Level.INFO, "ScheduleEmergencyServiceJPanel");

        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.userAccount = userAccount;
        this.vehicleInformationList = enterprise.getVehicleInformationList();
        this.vehicle = vehicle;
        this.EMSPatientDirectory = EMSPatientDirectory;
        this.EMSPatient = EMSPatient;
        this.organization = organization;
        txtVehicleNo.setEnabled(false);
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblTransport = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblhosp = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        assignJButton = new javax.swing.JButton();
        btnComplete = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jLabel16 = new javax.swing.JLabel();
        comboBoxLocality = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        txtVehicleNo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtPatientName = new javax.swing.JTextField();
        txtContactNo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtPickupAddress = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtDestination = new javax.swing.JTextField();
        btnSchedule = new javax.swing.JButton();

        tblTransport.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Name", "Transfer to", "Request DateTime", "Assigned to", "Status"
            }
        ));
        jScrollPane1.setViewportView(tblTransport);

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tamil MN", 1, 14)); // NOI18N
        jLabel1.setText("INCOMING HOSPITAL TRANSFER REQUESTS");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 430, 320, 29));

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        tblhosp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Name", "Transfer from", "Transfer to", "Request DateTime", "Assigned to", "Status"
            }
        ));
        jScrollPane2.setViewportView(tblhosp);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 470, 830, 154));

        jLabel8.setFont(new java.awt.Font("Tamil MN", 1, 18)); // NOI18N
        jLabel8.setText("SCHEDULE EMERGENCY REQUEST");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 10, 326, 29));

        assignJButton.setText("Assign to me & Process");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });
        add(assignJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 630, -1, -1));

        btnComplete.setText("Complete");
        btnComplete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompleteActionPerformed(evt);
            }
        });
        add(btnComplete, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 630, -1, -1));

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        add(refreshJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 430, -1, -1));

        jLayeredPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel16.setText("Locality:");

        comboBoxLocality.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose a locality", "Tambaram", "Mambhazham", "Egmore", "Adyar", "Anna Nagar" }));
        comboBoxLocality.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxLocalityActionPerformed(evt);
            }
        });

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Vehicle No:");

        jLabel2.setText("Patient Name:");

        txtContactNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtContactNoActionPerformed(evt);
            }
        });
        txtContactNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtContactNoKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtContactNoKeyPressed(evt);
            }
        });

        jLabel3.setText("ContactNo:");

        jLabel4.setText("Source:");

        jLabel5.setText("Destination:");

        txtDestination.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDestinationActionPerformed(evt);
            }
        });

        jLayeredPane1.setLayer(jLabel16, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(comboBoxLocality, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel11, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(txtVehicleNo, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(txtPatientName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(txtContactNo, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(txtPickupAddress, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(txtDestination, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(txtContactNo, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(23, 23, 23)
                                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPatientName, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtVehicleNo, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(comboBoxLocality, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPickupAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDestination, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 14, Short.MAX_VALUE))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxLocality, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txtVehicleNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPatientName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtContactNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtPickupAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtDestination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18))
        );

        add(jLayeredPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 90, 380, 290));

        btnSchedule.setText("Submit");
        btnSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnScheduleActionPerformed(evt);
            }
        });
        add(btnSchedule, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 10, -1, -1));
    }// </editor-fold>//GEN-END:initComponents


 

    private void populateTable() {
        logger.log(Level.INFO, "populateTable --ScheduleEmergencyServiceJPanel");

        DefaultTableModel dtm = (DefaultTableModel) tblhosp.getModel();

        dtm.setRowCount(0);
        
        for (WorkRequest wq : enterprise.getWorkQueue().getWorkRequestList()) {
            Object row[] = new Object[6];
            row[0] = ((TransferRequest) wq);
            row[1] = ((TransferRequest) wq).getSenderEnterprise();
            row[2] = ((TransferRequest) wq).getEnterprise().getName();
            row[3] = ((TransferRequest) wq).getTime();
            try {
                if (((TransferRequest) wq).getReceiver().equals("")) {
                    row[4] = "No assignee yet";
                } else {
                    row[4] = ((TransferRequest) wq).getReceiver();
                }
            } catch (NullPointerException e) {
                row[4] = "No assignee yet";
            }
            if (wq.getStatus().equals("0")) {
                row[5] = "Pending";
            } else if (wq.getStatus().equals("1")) {
                row[5] = "In Progress";
            } else if (wq.getStatus().equals("4")) {
                row[5] = "Transferred";
            }
            dtm.addRow(row);

        }

    }

    private void comboBoxLocalityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxLocalityActionPerformed
        // TODO add your handling code here:
        logger.log(Level.INFO, "comboBoxLocalityActionPerformed --ScheduleEmergencyServiceJPanel");

        for (Vehicle vehicle : vehicleInformationList.getVehicleInformationList()) {
            if (String.valueOf(comboBoxLocality.getSelectedItem()).equals(vehicle.getAvailable_locality()) && vehicle.isAvailable() == true) {
                txtVehicleNo.setText(vehicle.getVehicleNo());
                return;
            } else {
                txtVehicleNo.setText("");
            }
        }
    }//GEN-LAST:event_comboBoxLocalityActionPerformed

    private void btnScheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnScheduleActionPerformed
        // TODO add your handling code here:
        logger.log(Level.INFO, "btnScheduleActionPerformed --ScheduleEmergencyServiceJPanel");

        if (comboBoxLocality.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Please select a locality");
            return;
        }

        String patientName = txtPatientName.getText();
        if (patientName.isEmpty() || patientName == null) {
            JOptionPane.showMessageDialog(null, "Patient name cannot be empty");
            return;
        }
        if (comboBoxLocality.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Please choose a locality");
            return;
        }

        String vehicleNo = txtVehicleNo.getText();
        if (vehicleNo.isEmpty() || vehicleNo == null) {
            JOptionPane.showMessageDialog(null, "Please choose a locality again as VehicleNo field is empty");
            return;
        }

        String contactNo = txtContactNo.getText();
        if (contactNo.isEmpty() || contactNo == null) {
            JOptionPane.showMessageDialog(null, "Contact Number cannot be empty");
            return;
        }
        if (contactNo.length() > 10 || contactNo.length() < 10) {
            JOptionPane.showMessageDialog(null, "Only 10 numbers are allowed in ContactNo field");
            return;
        }

        String source = txtPickupAddress.getText();
        if (source.isEmpty() || source == null) {
            JOptionPane.showMessageDialog(null, "Pickup address cannot be empty");
            return;
        }

        String destination = txtDestination.getText();

        this.EMSPatient = new EMSPatient(patientName, contactNo, source, destination);
        EMSPatientDirectory.addEMSPatient(this.EMSPatient);

        for (Vehicle v : vehicleInformationList.getVehicleInformationList()) {
            if (v.getVehicleNo().equals(vehicleNo)) {
                this.vehicle = v;
                this.vehicle.setVehicleNo(vehicleNo);
                this.vehicle.setAvailable(false);
            }

        }

        TransportWorkRequest tq = new TransportWorkRequest(this.EMSPatient, this.vehicle);
        if(patientToTransfer != null){
            tq.setTransferPatient(patientToTransfer);
            tq.setReceiverEnterprise(toEnterprise);
            tq.setIsTransfer(true);
            patientToTransfer = null;
        }
        tq.setStatus(TransportWorkRequest.REQUEST_PENDING);
        tq.setTime(LocalDateTime.now());
        tq.setSender(userAccount);

        EMSNurseWorkRequest nurse = new EMSNurseWorkRequest(this.EMSPatient);
        nurse.setStatus(EMSNurseWorkRequest.REQUEST_PENDING);
        nurse.setSender(userAccount);
        nurse.setMessage("Emergency Patient");
        nurse.setSender(userAccount);
        nurse.setTime(LocalDateTime.now());

        Organization organization = null;
        if (enterprise.getEnterpriseType() == Enterprise.EnterpriseType.EmergencyCare) {
            for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (org instanceof DriverOrganization) {
                    organization = org;
                    organization.getWorkQueue().getWorkRequestList().add(tq);
                    userAccount.getWorkQueue().getWorkRequestList().add(tq);
                    organization = null;

                }
                if (org instanceof EMSNurseOrganization) {
                    organization = org;
                    organization.getWorkQueue().getWorkRequestList().add(nurse);
                    userAccount.getWorkQueue().getWorkRequestList().add(nurse);
                    organization = null;
                }
            }
        }
        if (flag == 1) {
           
            txtPatientName.setEnabled(true);
        }

        JOptionPane.showMessageDialog(null, "Your work request has been scheduled!", "success", JOptionPane.PLAIN_MESSAGE);

        txtPatientName.setText("");
        txtContactNo.setText("");
        txtPickupAddress.setText("");
        txtVehicleNo.setText("");
        txtDestination.setText("");
        comboBoxLocality.setSelectedIndex(0);
        txtPatientName.setEnabled(true);


    }//GEN-LAST:event_btnScheduleActionPerformed


    private void txtContactNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtContactNoKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtContactNoKeyPressed

    private void txtContactNoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtContactNoKeyTyped
        // TODO add your handling code here:
        logger.log(Level.INFO, "txtContactNoKeyTyped --ScheduleEmergencyServiceJPanel");

        char vchar = evt.getKeyChar();
        if (!(Character.isDigit(vchar))
                || (vchar == KeyEvent.VK_BACKSPACE)
                || (vchar == KeyEvent.VK_DELETE)) {
            evt.consume();
            JOptionPane.showMessageDialog(null, "Please enter a number");
        }
    }//GEN-LAST:event_txtContactNoKeyTyped

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        logger.log(Level.INFO, "btnBackActionPerformed --ScheduleEmergencyServiceJPanel");

        userProcessContainer.remove(this);
        CardLayout cardLayout = (CardLayout) userProcessContainer.getLayout();
        cardLayout.previous(userProcessContainer);
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        Component[] comps = this.userProcessContainer.getComponents();
        for (Component comp : comps) {
            if (comp instanceof EMSManagerJPanel) {
                EMSManagerJPanel createP = (EMSManagerJPanel) comp;
                createP.populateTableTransport();
                createP.populateTableNurse();
            }
            layout.previous(userProcessContainer);
        }
    }//GEN-LAST:event_btnBackActionPerformed

    private void txtDestinationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDestinationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDestinationActionPerformed

    private void txtContactNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtContactNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtContactNoActionPerformed

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed
        logger.log(Level.INFO, "assignJButtonActionPerformed --ScheduleEmergencyServiceJPanel");

        int selectedRow = tblhosp.getSelectedRow();
        int rowCount = tblhosp.getSelectedRowCount();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (rowCount > 1) {
            JOptionPane.showMessageDialog(null, "Please select only one row", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        WorkRequest wq = (WorkRequest) tblhosp.getValueAt(selectedRow, 0);
        

        if (wq.getStatus().equals("4")) {
            JOptionPane.showMessageDialog(null, "Request has been processed earlier", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (wq.getReceiver() != null) {
            JOptionPane.showMessageDialog(null, "Request has been processed earlier!", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }


        if (wq.getStatus().equals("0")) {
            wq.setReceiver(userAccount);
            wq.setStatus("1");
            wq.setTime(LocalDateTime.now());
            populateTable();
            JOptionPane.showMessageDialog(null, "The request is now assigned to you! Kindly process it");
            flag = 1;
            
            TransferRequest tq = (TransferRequest)tblhosp.getValueAt(selectedRow,0);
            txtPatientName.setText(tq.getPatient().getPatientName());
            txtPatientName.setEnabled(false);
            
            for (WorkRequest wr : enterprise.getWorkQueue().getWorkRequestList()) {
                if (wr.getClass().getName().contains("TransferRequest")) {
//                    txtPatientName.setText(String.valueOf(((TransferRequest) wr).getPatient()));
                    patientToTransfer = ((TransferRequest) wr).getPatient();
                    txtPatientName.setEnabled(false);
                    toEnterprise = ((TransferRequest) wr).getEnterprise();
//
                }
            }
        }
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void btnCompleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompleteActionPerformed
        // TODO add your handling code here:
        logger.log(Level.INFO, "btnCompleteActionPerformed --ScheduleEmergencyServiceJPanel");

      
            int selectedRow = tblhosp.getSelectedRow();
            if (selectedRow < 0) {
                JOptionPane.showMessageDialog(null, "Please select a row", "warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            int rowCount = tblhosp.getSelectedRowCount();
            if (rowCount > 1) {
                JOptionPane.showMessageDialog(null, "Please select only one row", "warning", JOptionPane.WARNING_MESSAGE);
                return;
            }

            WorkRequest wq = (WorkRequest) tblhosp.getValueAt(selectedRow, 0);
            //if(transport.getReceiver()==null)

            if (wq.getStatus().equalsIgnoreCase("4") && !wq.getReceiver().equals(userAccount)) {
                JOptionPane.showMessageDialog(null, "Request has been processed earlier", "warning", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (wq.getReceiver() == null) {
                JOptionPane.showMessageDialog(null, "Please assign the request first", "warning", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (wq.getStatus().equalsIgnoreCase("1")) {
                if (wq.getReceiver() != userAccount) {
                    JOptionPane.showMessageDialog(null, "Request has been processed earlier!", "warning", JOptionPane.WARNING_MESSAGE);
                    return;
                }
            }

            if (wq.getStatus().equals("Pending")) {
                JOptionPane.showMessageDialog(null, "Please assign and process the request", "warning", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (wq.getStatus().equals("1")) {
                wq.setStatus("4");
                wq.setTime(LocalDateTime.now());
                wq.setReceiver(userAccount);
                wq.setMessage("Patient has been brought to the Hospital");
                populateTable();
                JOptionPane.showMessageDialog(null, "Thank you!");
                btnBack.setEnabled(true);
            }
            if (wq.getReceiver().equals(userAccount)) {
                if (wq.getStatus().equals("Completed")) {
                    btnBack.setEnabled(true);
                }
            }
        
    }//GEN-LAST:event_btnCompleteActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        logger.log(Level.INFO, "refreshJButtonActionPerformed --ScheduleEmergencyServiceJPanel");

        populateTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnComplete;
    private javax.swing.JButton btnSchedule;
    private javax.swing.JComboBox<String> comboBoxLocality;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JTable tblTransport;
    private javax.swing.JTable tblhosp;
    private javax.swing.JTextField txtContactNo;
    private javax.swing.JTextField txtDestination;
    private javax.swing.JTextField txtPatientName;
    private javax.swing.JTextField txtPickupAddress;
    private javax.swing.JTextField txtVehicleNo;
    // End of variables declaration//GEN-END:variables

}
