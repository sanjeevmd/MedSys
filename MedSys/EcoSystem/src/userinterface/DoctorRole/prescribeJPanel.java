/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DoctorRole;

import Business.Allergy.Allergy;
import Business.Enterprise.Enterprise;
import Business.Medications.Medication;
import Business.Medications.MedicationAdministration;
import Business.Medications.MedicationList;
import Business.Patients.Patient;
import static Logger.Logger.logger;
import Mail.SendMail;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.MessagingException;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.AdministrativeRole.CreatePatientJPanel;

/**
 *
 * @author Sanjeev MD
 */
public class prescribeJPanel extends javax.swing.JPanel {

    /**
     * Creates new form prescribeJPanel
     */
    private JPanel userProcessContainer;
    private Patient patient;
    private MedicationList medList;
    private Enterprise enterprise;

    prescribeJPanel(JPanel userProcessContainer, Patient patient, Enterprise enterprise) {
        logger.log(Level.INFO, "prescribeJPanel");

        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.patient = patient;
        this.medList = new MedicationList();
        this.enterprise = enterprise;
        staticmeds();
        populateTable();
    }

    public void staticmeds() {
        logger.log(Level.INFO, "staticmeds --prescribeJPanel");

        ArrayList<Medication> medsforPres = new ArrayList<Medication>();
        Medication paracetamol = new Medication("Paracetamol", "clemastine", "chlorpheniramine");
        Medication danazol = new Medication("Danazol", "Cetirizine", "levocetirizine");
        medsforPres.add(danazol);
        medsforPres.add(paracetamol);
        medList.setMedicationList(medsforPres);

        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        dtm.setRowCount(0);
        for (Medication loc : this.medList.getMedicationList()) {
            Object row[] = new Object[1];
            row[0] = loc;
            dtm.addRow(row);
        }
    }

    public void populateTable() {
        logger.log(Level.INFO, "populateTable --prescribeJPanel");

        DefaultTableModel dtm = (DefaultTableModel) jTable2.getModel();
        dtm.setRowCount(0);
        for (Medication loc : patient.getMedList().getMedicationList()) {
            if (!loc.isIsDischarged()) {
                Object row[] = new Object[6];
                row[0] = loc;
                row[1] = loc.getI();
                row[2] = loc.getJ();
                row[3] = loc.getRoute();

                for (MedicationAdministration medAdmin : loc.getMedAdmin()) {
                    if (!medAdmin.getIsAdministered()) {
                        row[4] = "No";
                    } else {
                        row[4] = "Yes";
                    }
                }
                if (loc.isIsdiscontinue()) {
                    row[5] = "Yes";
                }
                dtm.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        BtnBack = new javax.swing.JButton();
        BtnAdministration = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        BtnPrescribe = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        routeComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        Txttimes = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        TxtDays = new javax.swing.JTextField();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Medication List"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 80, 310, 230));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Medication", "Frequency", "Duration", "Route", "Completed", "Discontinued"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setResizable(false);
            jTable2.getColumnModel().getColumn(1).setResizable(false);
            jTable2.getColumnModel().getColumn(2).setResizable(false);
            jTable2.getColumnModel().getColumn(3).setResizable(false);
            jTable2.getColumnModel().getColumn(4).setResizable(false);
            jTable2.getColumnModel().getColumn(5).setResizable(false);
        }

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 330, 721, 115));

        BtnBack.setText("Back");
        BtnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnBackActionPerformed(evt);
            }
        });
        add(BtnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        BtnAdministration.setText("Administration Details");
        BtnAdministration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAdministrationActionPerformed(evt);
            }
        });
        add(BtnAdministration, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 460, -1, -1));

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Day", "Frequency", "Administered", "Administered By"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable3);
        if (jTable3.getColumnModel().getColumnCount() > 0) {
            jTable3.getColumnModel().getColumn(0).setResizable(false);
            jTable3.getColumnModel().getColumn(1).setResizable(false);
            jTable3.getColumnModel().getColumn(2).setResizable(false);
        }

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 510, 721, 114));

        jLayeredPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        BtnPrescribe.setText("Prescribe");
        BtnPrescribe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnPrescribeActionPerformed(evt);
            }
        });

        jLabel3.setText("Route of Administration");

        routeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Route", "Oral", "Injection", "Ears", "Nose" }));

        jLabel1.setText("Frequency (per day)");

        jLabel2.setText("Duration (Days)");

        jLayeredPane1.setLayer(BtnPrescribe, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(routeComboBox, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(Txttimes, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(TxtDays, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BtnPrescribe)
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(35, 35, 35)
                        .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(routeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Txttimes)
                            .addComponent(TxtDays, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(routeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(31, 31, 31)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(Txttimes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(TxtDays, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(BtnPrescribe)
                .addGap(20, 20, 20))
        );

        add(jLayeredPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 380, 230));
    }// </editor-fold>//GEN-END:initComponents

    private void BtnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnBackActionPerformed
        // TODO add your handling code here:
        logger.log(Level.INFO, "BtnBackActionPerformed --prescribeJPanel");

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_BtnBackActionPerformed

    private void BtnPrescribeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnPrescribeActionPerformed
        // TODO add your handling code here:
        logger.log(Level.INFO, "BtnPrescribeActionPerformed --prescribeJPanel");

        if (routeComboBox.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(userProcessContainer, "Please select route of Administration");
            return;
        }
        if (TxtDays.getText().isEmpty()) {
            JOptionPane.showMessageDialog(userProcessContainer, "Please input frequency");
            return;
        }
        if (Txttimes.getText().isEmpty()) {
            JOptionPane.showMessageDialog(userProcessContainer, "Please input Duration");
            return;
        }
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow >= 0) {
            Medication med = (Medication) jTable1.getValueAt(selectedRow, 0);
            med.setRoute(routeComboBox.getSelectedItem().toString());

            if (patient.getAllergies().getAllergyList().size() > 0) {
                for (Allergy allergy : patient.getAllergies().getAllergyList()) {
                    for (String s : allergy.getCompound()) {
                        if (med.getCompoundName1().equals(s) || med.getCompoundName2().equals(s)) {
                            int yesno = JOptionPane.YES_NO_OPTION;
                            int option = JOptionPane.showConfirmDialog(userProcessContainer, "The medication has a substance which is "
                                    + "allergic to the patient. Do you still want to prescribe?", "Override Warning",
                                    yesno);
                            if (option == JOptionPane.YES_OPTION) {
                                patient.getMedList().addMed(med, Integer.parseInt(TxtDays.getText()), Integer.parseInt(Txttimes.getText()));

                                new Thread(new Runnable() {
                                    public void run() {
                                        try {
                                            SendMail.sendMail(enterprise.getMailID(), "Hi, Patient Medication  Prescription Alert by OverRiding an Allergy " + allergy.getAllergy()
                                                    + "\n\n"
                                                    + "Patient Name : " + patient.getPatientName() + "\nPatient HRN : "
                                                    + patient.getPatientHRN()
                                                    + "\nBlood Group : " + patient.getBloodGroup()
                                                    + "\nDoctor : " + patient.getDoctor().getName()
                                                    + "\nLocation : " + patient.getLocation().getName()
                                                    + "\nMedication : " + med.getName()
                                                    + "\n Route :" + med.getRoute()
                                                    + "\nFrequency :" + Integer.parseInt(TxtDays.getText()) + "*"
                                                    + Integer.parseInt(Txttimes.getText()), patient.getPatientHRN());
                                        } catch (MessagingException ex) {
                                            Logger.getLogger(CreatePatientJPanel.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                    }
                                }).start();

                                populateTable();
                                return;
                            } else {
                                populateTable();
                                return;
                            }
                        }
                    }
                }
                patient.getMedList().addMed(med, Integer.parseInt(TxtDays.getText()), Integer.parseInt(Txttimes.getText()));
                populateTable();
                return;
            } else {
                patient.getMedList().addMed(med, Integer.parseInt(TxtDays.getText()), Integer.parseInt(Txttimes.getText()));

                new Thread(new Runnable() {
                    public void run() {
                        try {
                            SendMail.sendMail(enterprise.getMailID(), "Hi, Patient Medication  Prescription Alert \n\n"
                                    + "Patient Name : " + patient.getPatientName() + "\nPatient HRN : "
                                    + patient.getPatientHRN()
                                    + "\nBlood Group : " + patient.getBloodGroup()
                                    + "\nDoctor : " + patient.getDoctor().getName()
                                    + "\nLocation : " + patient.getLocation().getName()
                                    + "\nMedication : " + med.getName()
                                    + "\n Route :" + med.getRoute()
                                    + "\nFrequency :" + Integer.parseInt(TxtDays.getText()) + "*"
                                    + Integer.parseInt(Txttimes.getText()), patient.getPatientHRN());
                        } catch (MessagingException ex) {
                            Logger.getLogger(CreatePatientJPanel.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }).start();

                populateTable();
                return;
            }
        } else {
            JOptionPane.showMessageDialog(userProcessContainer, "Please Select a Medication");
            return;
        }
    }//GEN-LAST:event_BtnPrescribeActionPerformed

    private void BtnAdministrationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAdministrationActionPerformed
        // TODO add your handling code here:
        logger.log(Level.INFO, "BtnAdministrationActionPerformed --prescribeJPanel");

        int selectedRow = jTable2.getSelectedRow();
        if (selectedRow >= 0) {
            Medication med = (Medication) jTable2.getValueAt(selectedRow, 0);
            DefaultTableModel dtm = (DefaultTableModel) jTable3.getModel();
            dtm.setRowCount(0);
            for (MedicationAdministration medAdmin : med.getMedAdmin()) {
                Object row[] = new Object[4];
                row[0] = medAdmin.getDay();
                row[1] = medAdmin.getTime();
                row[2] = medAdmin.getIsAdministered();
                row[3] = medAdmin.getAdministeredBy();
                dtm.addRow(row);
            }
        } else {
            JOptionPane.showMessageDialog(userProcessContainer, "Please select the medication");
            return;
        }
    }//GEN-LAST:event_BtnAdministrationActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnAdministration;
    private javax.swing.JButton BtnBack;
    private javax.swing.JButton BtnPrescribe;
    private javax.swing.JTextField TxtDays;
    private javax.swing.JTextField Txttimes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JComboBox<String> routeComboBox;
    // End of variables declaration//GEN-END:variables
}
