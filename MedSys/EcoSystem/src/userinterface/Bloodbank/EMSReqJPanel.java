/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Bloodbank;

import Business.Blood.BloodGroup;
import Business.Blood.BloodGroupList;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.ClinicianOrganization;
import Business.Organization.Organization;
import Business.Organization.OrganizationDirectory;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.BloodReqToNewBB;
import Business.WorkQueue.BloodrequestToBBfromEMS;
import Business.WorkQueue.WorkQueue;
import Business.WorkQueue.WorkRequest;
import static Logger.Logger.logger;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.logging.Level;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author harshi
 */
public class EMSReqJPanel extends javax.swing.JPanel {

    /**
     * Creates new form HospitalReqJPanel
     */
    private JPanel userProcessContainer;
    private ClinicianOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private BloodGroup bloodgroup;
    private BloodGroupList bloodgrouplist;
    private EcoSystem ecosystem;
    private Network network;
    private Enterprise.EnterpriseType enterprisetype;
    private OrganizationDirectory organizationdirectory;

    public EMSReqJPanel(JPanel userProcessContainer, BloodGroup bloodgroup, BloodGroupList bloodgrouplist, Enterprise enterprise, UserAccount userAccount, EcoSystem ecosystem) {
        logger.log(Level.INFO, "EMSReqJPanel");

        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.bloodgroup = bloodgroup;
        this.bloodgrouplist = bloodgrouplist;
        this.network = network;
        this.ecosystem = ecosystem;
        this.userAccount = userAccount;
        this.enterprise = enterprise;
        this.enterprisetype = enterprisetype;
        this.organization = organization;
        this.organizationdirectory = organizationdirectory;

        populateBloodReqTable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        bloodReqTable = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        btnAccept = new javax.swing.JButton();
        btnDecline = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        manageEnt1 = new javax.swing.JLabel();
        manageEnt2 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bloodReqTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Blood Group", "No of Units", "Request Status", "Assigned To"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(bloodReqTable);
        if (bloodReqTable.getColumnModel().getColumnCount() > 0) {
            bloodReqTable.getColumnModel().getColumn(0).setResizable(false);
            bloodReqTable.getColumnModel().getColumn(1).setResizable(false);
            bloodReqTable.getColumnModel().getColumn(2).setResizable(false);
            bloodReqTable.getColumnModel().getColumn(3).setResizable(false);
        }

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 180, 659, 143));

        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });
        add(assignJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 340, -1, -1));

        btnAccept.setText("Accept");
        btnAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptActionPerformed(evt);
            }
        });
        add(btnAccept, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 340, -1, -1));

        btnDecline.setText("Request Blood");
        btnDecline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeclineActionPerformed(evt);
            }
        });
        add(btnDecline, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 340, -1, -1));

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        add(refreshJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 20, -1, -1));

        backJButton.setText("Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        manageEnt1.setFont(new java.awt.Font("Tamil MN", 0, 14)); // NOI18N
        manageEnt1.setText("EMS Requests:");
        add(manageEnt1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 140, 250, -1));

        manageEnt2.setFont(new java.awt.Font("Tamil MN", 1, 18)); // NOI18N
        manageEnt2.setText("CLINICIAN REQUEST AREA");
        add(manageEnt2, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 20, 250, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void populateBloodReqTable() {
        logger.log(Level.INFO, "populateBloodReqTable --EMSReqJPanel");

        DefaultTableModel model = (DefaultTableModel) bloodReqTable.getModel();

        model.setRowCount(0);

        for (WorkRequest workreq : enterprise.getWorkQueue().getWorkRequestList()) {
            if (workreq.getClass().getName().contains("BloodrequestToBBfromEMS")) {
                Object[] row = new Object[4];
                row[0] = ((BloodrequestToBBfromEMS) workreq);
                row[1] = ((BloodrequestToBBfromEMS) workreq).getReqUnits();
                row[2] = workreq.getStatus();
                try {
                    row[3] = workreq.getReceiver().getEmployee().getName();
                } catch (NullPointerException e) {

                    row[3] = "No Assignee yet";
                }
                
                model.addRow(row);
            }
        }

    }

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed
        logger.log(Level.INFO, "assignJButtonActionPerformed --EMSReqJPanel");

        int selectedRow = bloodReqTable.getSelectedRow();
        int rowCount = bloodReqTable.getSelectedRowCount();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a request", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (rowCount > 1) {
            JOptionPane.showMessageDialog(null, "Please select only one request", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        WorkRequest wq = (WorkRequest) bloodReqTable.getValueAt(selectedRow, 0);
        //        if(wq.getReceiver()!=null){
        //        JOptionPane.showMessageDialog(null, "Request has been processed earlier","warning",JOptionPane.WARNING_MESSAGE);
        //        return;
        //        }

        if (wq.getStatus().equals("In Progress")) {
            JOptionPane.showMessageDialog(null, "The request is already in process", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (wq.getStatus().equals("Completed") || wq.getStatus().equals("Declined")) {
            JOptionPane.showMessageDialog(null, "Request has been completed earlier", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if ((wq).getStatus().equals("Pending")) {
            (wq).setReceiver(userAccount);
            (wq).setStatus(BloodrequestToBBfromEMS.REQUEST_PROGRESS);
            populateBloodReqTable();
            JOptionPane.showMessageDialog(null, "The request is now assigned to you! Kindly process it");
        }

    }//GEN-LAST:event_assignJButtonActionPerformed

    private void btnAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptActionPerformed
        // TODO add your handling code here:
        logger.log(Level.INFO, "btnAcceptActionPerformed --EMSReqJPanel");

        int selectedRow = bloodReqTable.getSelectedRow();
        int rowCount = bloodReqTable.getSelectedRowCount();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a request", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (rowCount > 1) {
            JOptionPane.showMessageDialog(null, "Please select only one request", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (rowCount == 1) {
            WorkRequest wq = (WorkRequest) bloodReqTable.getValueAt(selectedRow, 0);

            if (wq.getStatus().equals("Pending")) {
                JOptionPane.showMessageDialog(null, "The request has to be assigned first");
            } else if (wq.getStatus().equals("Completed") || wq.getStatus().equals("Declined")) {
                JOptionPane.showMessageDialog(null, "The request has been processed earlier");
            } else {
                String reqbloodgroup = ((BloodrequestToBBfromEMS) wq).getBloodGroup();
                for (BloodGroup bg : this.bloodgrouplist.getBloodGroupList()) {
                    if (bg.getBloodgroup().equals(reqbloodgroup)) {
                        int AvailableUnits = Integer.parseInt(bg.getAvailableUnits());
                    }
                }
                int BorrowedUnits = Integer.parseInt(((BloodrequestToBBfromEMS) wq).getReqUnits());
                for (BloodGroup bg : this.bloodgrouplist.getBloodGroupList()) {
                    if (bg.getBloodgroup().equals(reqbloodgroup)) {
                        if (Integer.parseInt(bg.getAvailableUnits()) > BorrowedUnits) {
                            bg.setAvailableUnits(String.valueOf((Integer.parseInt(bg.getAvailableUnits()) - BorrowedUnits)));
                            JOptionPane.showMessageDialog(null, "Request has been accepted");
                            wq.setStatus(BloodrequestToBBfromEMS.REQUEST_COMPLETE);
                            populateBloodReqTable();
                            break;
                        } else {
                            JOptionPane.showMessageDialog(null, "Available Blood Units are lesser than the requested units, Please Decline the Request");
                        }
                    }

                }
            }
        }

    }//GEN-LAST:event_btnAcceptActionPerformed

    private void btnDeclineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeclineActionPerformed
        // TODO add your handling code here:
        logger.log(Level.INFO, "btnDeclineActionPerformed --EMSReqJPanel");

        int selectedRow = bloodReqTable.getSelectedRow();
        int rowCount = bloodReqTable.getSelectedRowCount();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a request to be worked on", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (rowCount > 1) {
            JOptionPane.showMessageDialog(null, "Please select only one request", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        WorkRequest wq = (WorkRequest) bloodReqTable.getValueAt(selectedRow, 0);

        if (wq.getStatus().equals("Pending")) {
            JOptionPane.showMessageDialog(null, "The request has to be assigned first");
        } else if (wq.getStatus().equals("Completed") || wq.getStatus().equals("Declined")) {
            JOptionPane.showMessageDialog(null, "The request has been processed earlier");
        } else {
            String bg = ((BloodrequestToBBfromEMS) wq).getBloodGroup();
            for (BloodGroup b : bloodgrouplist.getBloodGroupList()) {
                if (b.getBloodgroup().equals(bg)) {
                    this.bloodgroup = b;
                }
            }
            SendReqJPanel panel = new SendReqJPanel(userProcessContainer, bloodgroup, bloodgrouplist, enterprise, userAccount, ecosystem);
            userProcessContainer.add("SendReqJPanel", panel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);

        }


    }//GEN-LAST:event_btnDeclineActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        logger.log(Level.INFO, "refreshJButtonActionPerformed --EMSReqJPanel");

        populateBloodReqTable();

    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        logger.log(Level.INFO, "backJButtonActionPerformed --EMSReqJPanel");
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        ClinicianWorkAreaJPanel dwjp = (ClinicianWorkAreaJPanel) component;
        dwjp.populateTable();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);

    }//GEN-LAST:event_backJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JTable bloodReqTable;
    private javax.swing.JButton btnAccept;
    private javax.swing.JButton btnDecline;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel manageEnt1;
    private javax.swing.JLabel manageEnt2;
    private javax.swing.JButton refreshJButton;
    // End of variables declaration//GEN-END:variables
}
