/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Bloodbank;

import Business.Blood.BloodGroup;
import Business.Blood.BloodGroupList;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import static Business.Enterprise.Enterprise.EnterpriseType.BloodBank;
import Business.Network.Network;
import Business.Organization.ClinicianOrganization;
import Business.Organization.LabOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.BloodReqToNewBB;
import Business.WorkQueue.LabTestWorkRequest;
import static Logger.Logger.logger;
import com.sun.glass.events.KeyEvent;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.HashSet;
import java.util.logging.Level;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author harshi
 */
public class SendReqJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SendReqJPanel
     */
    private BloodGroup bloodgroup;
    private BloodGroupList bloodgrouplist;
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private Enterprise enterprise;
    private Enterprise.EnterpriseType enterprisetype;
    private Organization organization;

    private EcoSystem ecosystem;
    private Network network;

    public SendReqJPanel(JPanel userProcessContainer, BloodGroup bloodgroup, BloodGroupList bloodgrouplist, Enterprise enterprise, UserAccount userAccount, EcoSystem ecosystem) {
        logger.log(Level.INFO, "SendReqJPanel");

        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.bloodgroup = bloodgroup;
        this.bloodgrouplist = bloodgrouplist;
        this.userAccount = userAccount;
        this.enterprise = enterprise;
        this.enterprisetype = enterprisetype;
        this.organization = organization;
        this.ecosystem = ecosystem;
        this.network = network;
        updateDetails();

        //combo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSave = new javax.swing.JButton();
        BtnBack = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        sendToDoctorPanel = new javax.swing.JLayeredPane();
        jLabel3 = new javax.swing.JLabel();
        reqUnitsTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        bloodGroupComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnSave.setText("Submit Request");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 20, -1, -1));

        BtnBack.setText("Back");
        BtnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnBackActionPerformed(evt);
            }
        });
        add(BtnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tamil MN", 1, 18)); // NOI18N
        jLabel4.setText("CLINICIAN WORK REQUEST AREA");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, -1, -1));

        sendToDoctorPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel3.setText("Required Units");

        reqUnitsTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                reqUnitsTextFieldKeyTyped(evt);
            }
        });

        jLabel2.setText("Blood Group");

        bloodGroupComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "O+", "O-", "A+", "A-", "B+", "B-", "AB+", "AB-" }));
        bloodGroupComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bloodGroupComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel1.setText("Request Blood");

        sendToDoctorPanel.setLayer(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        sendToDoctorPanel.setLayer(reqUnitsTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);
        sendToDoctorPanel.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        sendToDoctorPanel.setLayer(bloodGroupComboBox, javax.swing.JLayeredPane.DEFAULT_LAYER);
        sendToDoctorPanel.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout sendToDoctorPanelLayout = new javax.swing.GroupLayout(sendToDoctorPanel);
        sendToDoctorPanel.setLayout(sendToDoctorPanelLayout);
        sendToDoctorPanelLayout.setHorizontalGroup(
            sendToDoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sendToDoctorPanelLayout.createSequentialGroup()
                .addGroup(sendToDoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sendToDoctorPanelLayout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addGroup(sendToDoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(38, 38, 38)
                        .addGroup(sendToDoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bloodGroupComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(reqUnitsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(sendToDoctorPanelLayout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(95, Short.MAX_VALUE))
        );
        sendToDoctorPanelLayout.setVerticalGroup(
            sendToDoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sendToDoctorPanelLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(sendToDoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(bloodGroupComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(sendToDoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(reqUnitsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        add(sendToDoctorPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 180, 400, 210));
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        logger.log(Level.INFO, "btnSaveActionPerformed --SendReqJPanel");

        String bloodgroup = (String) bloodGroupComboBox.getSelectedItem();
        String reqUnits = reqUnitsTextField.getText();
        if (bloodGroupComboBox.getSelectedIndex() < 0 || reqUnitsTextField.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter data in all fields", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            for (BloodGroup bg : bloodgrouplist.getBloodGroupList()) {
                if (bg.getBloodgroup().equals(bloodgroup)) {
                    this.bloodgroup = bg;
                }
            }

            BloodReqToNewBB request = new BloodReqToNewBB(this.bloodgroup);

            request.setReqUnits(reqUnits);
            request.setSender(this.userAccount);
            request.setStatus(BloodReqToNewBB.REQUEST_PENDING);

            Organization org = null;
            for (Network network : ecosystem.getNetworkList()) {
                for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                    if (enterprise.getEnterpriseType() == Enterprise.EnterpriseType.BloodBank && !enterprise.getName().equals(this.enterprise.getName())) {
                        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                            if (organization instanceof ClinicianOrganization) {
                                org = organization;
                                break;
                            }
                        }
                    }
                }
            }
            if (org != null) {
                org.getWorkQueue().getWorkRequestList().add(request);
                userAccount.getWorkQueue().getWorkRequestList().add(request);
            }
            JOptionPane.showMessageDialog(null, "Work Request has been submitted successfully");
           
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void BtnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnBackActionPerformed
        // TODO add your handling code here:
        logger.log(Level.INFO, "BtnBackActionPerformed --SendReqJPanel");

        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        ClinicianWorkAreaJPanel dwjp = (ClinicianWorkAreaJPanel) component;
        dwjp.populateTable();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);

    }//GEN-LAST:event_BtnBackActionPerformed

    private void reqUnitsTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_reqUnitsTextFieldKeyTyped
        // TODO add your handling code here:
        logger.log(Level.INFO, "reqUnitsTextFieldKeyTyped --SendReqJPanel");

        char vchar = evt.getKeyChar();
        if (!(Character.isDigit(vchar))
                || (vchar == KeyEvent.VK_BACKSPACE)
                || (vchar == KeyEvent.VK_DELETE)) {
            evt.consume();
            JOptionPane.showMessageDialog(null, "Please enter a number");
        }
    }//GEN-LAST:event_reqUnitsTextFieldKeyTyped

    private void bloodGroupComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bloodGroupComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bloodGroupComboBoxActionPerformed
//public void combo(){
//        
//        HashSet<String> hash = new HashSet<>();
//        for (BloodGroup bloodgroup : bloodgrouplist.getBloodGroupList()) {
//            if (bloodgroup.getBloodgroup() != null) {
//                hash.add(bloodgroup.getBloodgroup());
//            }
//        }
//        
//        for(String u: hash){
//                bloodGroupComboBox.addItem(u);            
//        }      
//        
//    }

    public void updateDetails() {
        logger.log(Level.INFO, "updateDetails --SendReqJPanel");

        bloodGroupComboBox.setSelectedItem(bloodgroup.getBloodgroup());
        bloodGroupComboBox.setEnabled(false);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnBack;
    private javax.swing.JComboBox<String> bloodGroupComboBox;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField reqUnitsTextField;
    private javax.swing.JLayeredPane sendToDoctorPanel;
    // End of variables declaration//GEN-END:variables
}
