/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Bloodbank;

import Business.Blood.BloodGroup;
import Business.Blood.BloodGroupList;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.ClinicianOrganization;
import Business.Organization.DoctorOrganization;
import Business.Organization.LabOrganization;
import Business.Organization.ManagerOrganization;
import Business.Organization.Organization;
import Business.Role.LabAssistantRole;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.BloodReqToNewBB;
import Business.WorkQueue.BloodrequestToBBfromEMS;
import Business.WorkQueue.BloodrequestToBBfromHospital;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.WorkRequest;
import static Logger.Logger.logger;
import java.awt.BorderLayout;
import java.awt.Color;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map.Entry;
import java.util.logging.Level;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author harshi
 */
public class ManagerRoleWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManagerRoleWorkArea
     */
    private JPanel userProcessContainer;
    private ManagerOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private ClinicianOrganization co;
    private List<Entry<String, Integer>> topBloodUnits;
    private List<Entry<String, Integer>> topRequests;
    private BloodGroup bloodgroup;
    private BloodGroupList bloodgrouplist;
    private EcoSystem ecosystem;

    public ManagerRoleWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, ManagerOrganization organization, Enterprise enterprise, EcoSystem ecosystem) {
        logger.log(Level.INFO, "ManagerRoleWorkAreaJPanel");

        initComponents();

        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = account;
        valueLabel.setText(enterprise.getName());

        this.ecosystem = ecosystem;
        //populateRequestTable();
        populatePieChartData();
        populateTextFields();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        top3ReqBlood = new javax.swing.JButton();
        manageEnt2 = new javax.swing.JLabel();
        pieChartPanel = new javax.swing.JPanel();
        totalHelpReq = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();
        manageEnt1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        TotHspReq = new javax.swing.JTextField();

        top3ReqBlood.setText("View top 3 Requested Blood Groups");
        top3ReqBlood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                top3ReqBloodActionPerformed(evt);
            }
        });

        manageEnt2.setFont(new java.awt.Font("Tamil MN", 1, 13)); // NOI18N
        manageEnt2.setText("Enterprise:");

        pieChartPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        totalHelpReq.setText("Total No of  Requests  ");

        valueLabel.setFont(new java.awt.Font("Tamil MN", 1, 13)); // NOI18N
        valueLabel.setText("<value>");

        manageEnt1.setFont(new java.awt.Font("Tamil MN", 1, 18)); // NOI18N
        manageEnt1.setText("MANAGER WORK AREA");

        jButton1.setText("Top 3 Requested Blood units");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Top 3 Blood Requests");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 333, Short.MAX_VALUE)
                .addComponent(manageEnt2, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(valueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(464, 464, 464))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(totalHelpReq)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TotHspReq, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(55, 55, 55)
                        .addComponent(pieChartPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(278, 278, 278)
                        .addComponent(manageEnt1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(totalHelpReq)
                            .addComponent(TotHspReq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(45, 45, 45)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(manageEnt1)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(valueLabel)
                            .addComponent(manageEnt2))
                        .addGap(55, 55, 55)
                        .addComponent(pieChartPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(402, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
//
    private void top3ReqBloodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_top3ReqBloodActionPerformed

    }//GEN-LAST:event_top3ReqBloodActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        logger.log(Level.INFO, "jButton1ActionPerformed --ManagerRoleWorkAreaJPanel");

        findTop3BloodRequest();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
         logger.log(Level.INFO, "jButton2ActionPerformed --ManagerRoleWorkAreaJPanel");
            findTop3();
            
                                               
    }                                        
                                                    
    
      public void populateTextFields()
      {
         
          logger.log(Level.INFO, "PopulateTextFields --ManagerRoleWorkAreaJPanel");
          int totalReq = 0;
         
          try
          {
  
           for(Network network : ecosystem.getNetworkList()){
               if(enterprise.equals(this.enterprise)){
                  totalReq = enterprise.getWorkQueue().getWorkRequestList().size(); 
           for(Organization org: enterprise.getOrganizationDirectory().getOrganizationList()){
               if(org instanceof ClinicianOrganization){
                   totalReq  = totalReq + org.getWorkQueue().getWorkRequestList().size();
               }
               if(org instanceof LabOrganization){
                   totalReq  = totalReq + org.getWorkQueue().getWorkRequestList().size();
               }
                   
           }
           }
           
          
          // TotHspReq.setText(String.valueOf(totalHospReq));
           }
           TotHspReq.setText(String.valueOf(totalReq));
           TotHspReq.setEnabled(false);

          }
          catch (Exception e)
          {
              JOptionPane.showMessageDialog(null, "No Data to display");
          }

       
        

    }//GEN-LAST:event_jButton2ActionPerformed

   

    

    public void populatePieChartData() {
        logger.log(Level.INFO, "populatePieChartData --ManagerRoleWorkAreaJPanel");

        DefaultPieDataset dataSet = new DefaultPieDataset();
        int OPositive = 0;
        int ONegative = 0;
        int APositive = 0;
        int ANegative = 0;
        int ABPositive = 0;
        int ABNegative = 0;
        int BPositive = 0;
        int BNegative = 0;
        try {

            for (BloodGroup bg : enterprise.getBloodgrouplist().getBloodGroupList()) {
                if (bg.getBloodgroup().equalsIgnoreCase("O+")) {
                    OPositive = Integer.parseInt(bg.getAvailableUnits());
                } else if (bg.getBloodgroup().equalsIgnoreCase("O-")) {
                    ONegative = Integer.parseInt(bg.getAvailableUnits());
                } else if (bg.getBloodgroup().equalsIgnoreCase("A+")) {
                    APositive = Integer.parseInt(bg.getAvailableUnits());
                } else if (bg.getBloodgroup().equalsIgnoreCase("A-")) {
                    ANegative = Integer.parseInt(bg.getAvailableUnits());
                } else if (bg.getBloodgroup().equalsIgnoreCase("B+")) {
                    BPositive = Integer.parseInt(bg.getAvailableUnits());
                } else if (bg.getBloodgroup().equalsIgnoreCase("B-")) {
                    BNegative = Integer.parseInt(bg.getAvailableUnits());
                } else if (bg.getBloodgroup().equalsIgnoreCase("AB-")) {
                    ABNegative = Integer.parseInt(bg.getAvailableUnits());
                } else if (bg.getBloodgroup().equalsIgnoreCase("AB+")) {
                    ABPositive = Integer.parseInt(bg.getAvailableUnits());
                }
            }

            dataSet.setValue("O+", OPositive);
            dataSet.setValue("O-", ONegative);
            dataSet.setValue("A+", APositive);
            dataSet.setValue("A-", ANegative);
            dataSet.setValue("B+", BPositive);
            dataSet.setValue("B-", BNegative);
            dataSet.setValue("AB+", ABPositive);
            dataSet.setValue("AB-", ABNegative);

            JFreeChart chart = ChartFactory.createPieChart3D("Pie Chart for BloodUnits", dataSet, true, true, Locale.ENGLISH);
            chart.setBackgroundPaint(Color.WHITE);
            chart.getTitle().setPaint(Color.BLUE);
            ChartPanel chartpanel = new ChartPanel(chart);
            chartpanel.setDomainZoomable(true);

            pieChartPanel.setLayout(new BorderLayout());
            pieChartPanel.add(chartpanel, BorderLayout.EAST);
            pieChartPanel.setVisible(true);
        } catch (NullPointerException npe) {
            JOptionPane.showMessageDialog(null, " No Data to display as of now!", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

    }

    public void findTop3BloodRequest() {
        logger.log(Level.INFO, "findTop3BloodRequest --ManagerRoleWorkAreaJPanel");

        int quantity = 0;
        String bg = "";
        HashMap<String, Integer> volMap = new HashMap<>();
        try {
            for (Network network : ecosystem.getNetworkList()) {
                if (enterprise.equals(this.enterprise)) {
                    for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
                        if (org instanceof ClinicianOrganization) {
                            for (WorkRequest request : org.getWorkQueue().getWorkRequestList()) {

                                if (request.getClass().getName().contains("BloodReqToNewBB")) {
                                    quantity = Integer.parseInt(((BloodReqToNewBB) request).getReqUnits());
                                    bg = ((BloodReqToNewBB) request).getBloodtype();
                                    if (volMap.containsKey(bg)) {
                                        volMap.put(bg, volMap.get(bg) + quantity);
                                    } else {
                                        volMap.put(bg, quantity);
                                    }
                                }
                            }
                        }
                          else if (org instanceof LabOrganization) {
                            for (WorkRequest request : org.getWorkQueue().getWorkRequestList()) {

                                if(request.getClass().getName().contains("LabTestWorkRequest")) {
                                    quantity = Integer.parseInt(((LabTestWorkRequest) request).getUnits());
                                    bg = ((LabTestWorkRequest) request).getBloodtype();
                                    if (volMap.containsKey(bg)) {
                                        volMap.put(bg, volMap.get(bg) + quantity);
                                    } else {
                                        volMap.put(bg, quantity);
                                    }
                                }
                                
                            }
                        }

                    }
                    for (WorkRequest request : enterprise.getWorkQueue().getWorkRequestList()) {

                        if (request.getClass().getName().contains("BloodrequestToBBfromHospital")) {
                            quantity = (((BloodrequestToBBfromHospital) request).getReqUnits());
                            bg = ((BloodrequestToBBfromHospital) request).getPatient().getBloodGroup();
                            if (volMap.containsKey(bg)) {
                                volMap.put(bg, volMap.get(bg) + quantity);
                            } else {
                                volMap.put(bg, quantity);
                            }
                        } else if (request.getClass().getName().contains("BloodrequestToBBfromEMS")) {
                            quantity = Integer.parseInt(((BloodrequestToBBfromEMS) request).getReqUnits());
                            bg = ((BloodrequestToBBfromEMS) request).getBloodGroup();
                            if (volMap.containsKey(bg)) {
                                volMap.put(bg, volMap.get(bg) + quantity);
                            } else {
                                volMap.put(bg, quantity);
                            }
                        }
                    }
                }
                System.out.println("volMap>>" + volMap.toString());

                List<Entry<String, Integer>> list = new LinkedList<>(volMap.entrySet());

                Collections.sort(list, new Comparator<Entry<String, Integer>>() {
                    public int compare(Entry<String, Integer> o1,
                            Entry<String, Integer> o2) {
                        if (o1.getValue() > o2.getValue()) {
                            return 1;
                        } else if (o1.getValue() < o2.getValue()) {
                            return -1;
                        }
                        return 0;
                    }

                });
                Collections.reverse(list);
                System.out.println("After Sort " + list.toString());

                topBloodUnits = list;

                DefaultCategoryDataset dataSet = new DefaultCategoryDataset();
                int count = 0;

                if (volMap.entrySet().size() <= 3) {
                    for (Entry<String, Integer> entry : list) {
                        System.out.println("Key : " + entry.getKey() + " Value : " + entry.getValue());
                        dataSet.setValue(entry.getValue(), "No of Blood Units", entry.getKey());
                    }
                } else if (volMap.entrySet().size() > 3) {
                    for (Entry<String, Integer> entry : list) {
                        System.out.println("Key : " + entry.getKey() + " Value : " + entry.getValue());
                        dataSet.setValue(entry.getValue(), "No of Blood Units", entry.getKey());
                        count++;
                        if (count == 3) {
                            break;
                        }
                    }
                }
                JFreeChart barchart = ChartFactory.createBarChart(" Top 3 BloodGroups based on Required Units ", " BloodGroup", "Quantity", dataSet, PlotOrientation.VERTICAL, false, true, false);
                barchart.setBackgroundPaint(Color.WHITE);
                barchart.getTitle().setPaint(Color.BLUE);
                CategoryPlot plot = barchart.getCategoryPlot();
                plot.setBackgroundPaint(Color.CYAN);

                ChartFrame frame = new ChartFrame("Bar Chart for Top 3 Blood Units ", barchart);
                frame.setVisible(true);
                Dimension ss = Toolkit.getDefaultToolkit().getScreenSize();
                Dimension frameSize = new Dimension(500, 300);

                frame.setBounds(ss.width / 2 - frameSize.width / 2,
                        ss.height / 2 - frameSize.height / 2,
                        frameSize.width, frameSize.height);

            }
        } catch (NullPointerException npe) {
            npe.printStackTrace();
            JOptionPane.showMessageDialog(null, " No Data to display as of now!", "warning", JOptionPane.WARNING_MESSAGE);
            return;

        }

    }

    public void findTop3() {
        logger.log(Level.INFO, "findTop3 --ManagerRoleWorkAreaJPanel");

        int req = 0;
        String bg = "";
        HashMap<String, Integer> volMap = new HashMap<>();
        try {
            for (Network network : ecosystem.getNetworkList()) {
                if (enterprise.equals(this.enterprise)) {
                    for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
                        if (org instanceof ClinicianOrganization) {
                            for (WorkRequest request : org.getWorkQueue().getWorkRequestList()) {
                                if (request.getClass().getName().contains("BloodReqToNewBB")) {

                                    bg = ((BloodReqToNewBB) request).getBloodtype();
                                    if (volMap.containsKey(bg)) {
                                        volMap.put(bg, volMap.get(bg) + 1);
                                    } else {
                                        volMap.put(bg, 1);
                                    }
                                }
                            }
                        }
                        else if (org instanceof LabOrganization) {
                            for (WorkRequest request : org.getWorkQueue().getWorkRequestList()) {
                                if (request.getClass().getName().contains("LabTestWorkRequest")) {

                                    bg = ((LabTestWorkRequest) request).getBloodtype();
                                    if (volMap.containsKey(bg)) {
                                        volMap.put(bg, volMap.get(bg) + 1);
                                    } else {
                                        volMap.put(bg, 1);
                                    }
                                }

                            }
                        }

                    }
                }
            }
            for (WorkRequest request : enterprise.getWorkQueue().getWorkRequestList()) {

                if (request.getClass().getName().contains("BloodrequestToBBfromHospital")) {

                    bg = ((BloodrequestToBBfromHospital) request).getPatient().getBloodGroup();
                    if (volMap.containsKey(bg)) {
                        volMap.put(bg, volMap.get(bg) + 1);
                    } else {
                        volMap.put(bg, 1);
                    }
                } else if (request.getClass().getName().contains("BloodrequestToBBfromEMS")) {

                    bg = ((BloodrequestToBBfromEMS) request).getBloodGroup();
                    if (volMap.containsKey(bg)) {
                        volMap.put(bg, volMap.get(bg) + 1);
                    } else {
                        volMap.put(bg, 1);
                    }
                }

            }

            System.out.println("volMap>>" + volMap.toString());

            List<Entry<String, Integer>> list = new LinkedList<>(volMap.entrySet());

            Collections.sort(list, new Comparator<Entry<String, Integer>>() {
                public int compare(Entry<String, Integer> o1,
                        Entry<String, Integer> o2) {
                    if (o1.getValue() > o2.getValue()) {
                        return 1;
                    } else if (o1.getValue() < o2.getValue()) {
                        return -1;
                    }
                    return 0;
                }

            });
            Collections.reverse(list);
            System.out.println("After Sort " + list.toString());

            topBloodUnits = list;

            DefaultCategoryDataset dataSet = new DefaultCategoryDataset();
            int count = 0;

            if (volMap.entrySet().size() <= 3) {
                for (Entry<String, Integer> entry : list) {
                    System.out.println("Key : " + entry.getKey() + " Value : " + entry.getValue());
                    dataSet.setValue(entry.getValue(), "No of Blood Requests", entry.getKey());
                }
            } else if (volMap.entrySet().size() > 3) {
                for (Entry<String, Integer> entry : list) {
                    System.out.println("Key : " + entry.getKey() + " Value : " + entry.getValue());
                    dataSet.setValue(entry.getValue(), "No of Blood Requests", entry.getKey());
                    count++;
                    if (count == 3) {
                        break;
                    }
                }
            }
            JFreeChart barchart = ChartFactory.createBarChart(" Top 3 BloodGroups based on no. of Requests  ", " BloodGroup", "No. of Requests", dataSet, PlotOrientation.VERTICAL, false, true, false);
            barchart.setBackgroundPaint(Color.WHITE);
            barchart.getTitle().setPaint(Color.BLUE);
            CategoryPlot plot = barchart.getCategoryPlot();
            plot.setBackgroundPaint(Color.CYAN);

            ChartFrame frame = new ChartFrame("Bar Chart for Top 3 BloodGroups ", barchart);
            frame.setVisible(true);
            Dimension ss = Toolkit.getDefaultToolkit().getScreenSize();
            Dimension frameSize = new Dimension(500, 300);

            frame.setBounds(ss.width / 2 - frameSize.width / 2,
                    ss.height / 2 - frameSize.height / 2,
                    frameSize.width, frameSize.height);
            frame.setVisible(true);

        } catch (NullPointerException npe) {
            npe.printStackTrace();
            JOptionPane.showMessageDialog(null, " No Data to display as of now!", "warning", JOptionPane.WARNING_MESSAGE);
            return;

        }

    }

//
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField TotHspReq;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel manageEnt1;
    private javax.swing.JLabel manageEnt2;
    private javax.swing.JPanel pieChartPanel;
    private javax.swing.JButton top3ReqBlood;
    private javax.swing.JLabel totalHelpReq;
    private javax.swing.JLabel valueLabel;
    // End of variables declaration//GEN-END:variables
}
