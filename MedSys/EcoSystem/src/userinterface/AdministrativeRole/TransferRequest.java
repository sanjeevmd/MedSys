/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.AdministrativeRole;

import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Location.Location;
import Business.Organization.Organization;
import Business.Organization.OrganizationDirectory;
import Business.Patients.Patient;
import Business.WorkQueue.MsgfromNurseToHospWorkRequest;
import Business.WorkQueue.TransportWorkRequest;
import Business.WorkQueue.WorkRequest;
import static Logger.Logger.logger;
import Mail.SendMail;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.MessagingException;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sanjeev MD
 */
public class TransferRequest extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Enterprise enterprise;

    /**
     * Creates new form TransferRequest
     */
    public TransferRequest(JPanel userProcessContainer, Enterprise enterprise) {
        logger.log(Level.INFO, "TransferRequest");
        initComponents();
        this.enterprise = enterprise;
        this.userProcessContainer = userProcessContainer;
        populateTable();
        populateComboBox();

    }

    public void populateTable() {
        logger.log(Level.INFO, "populateTable --TransferRequest");

        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        dtm.setRowCount(0);
        if (enterprise.getWorkQueue().getWorkRequestList().size() > 0) {
            for (WorkRequest req : enterprise.getWorkQueue().getWorkRequestList()) {
                if (req.getClass().getName().contains("TransportWorkRequest")) {
                    if (((TransportWorkRequest) req).isIsTransfer()) {
                        Object row[] = new Object[1];
                        row[0] = ((TransportWorkRequest) req).getTransferPatient();
                        dtm.addRow(row);
                    }
                }
            }
        }
    }

    public void populateComboBox() {
        logger.log(Level.INFO, "populateComboBox --IncomingRequest");

        OrganizationDirectory org = enterprise.getOrganizationDirectory();

        for (Organization o : org.getOrganizationList()) {
            if (o.getName().equals("Doctor Organization")) {
                for (Employee u : o.getEmployeeDirectory().getEmployeeList()) {
                    jComboBox1.addItem(u.toString());
                }
            }
        }
        for (Location loc : enterprise.getLocationList().getLocationList()) {
            jComboBox2.addItem(loc.getName());
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(172, 85, -1, 186));

        jButton1.setText("Admit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(671, 14, -1, -1));

        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jLayeredPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel2.setText("Doctor");

        jLabel3.setText("Location");

        jLabel1.setText("Patient HRN");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Doctor" }));

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Location" }));

        jLayeredPane1.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jTextField1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jComboBox1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jComboBox2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(47, 47, 47)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(90, Short.MAX_VALUE))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(29, 29, 29)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(29, 29, 29)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        add(jLayeredPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(172, 311, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        logger.log(Level.INFO, "jButton1ActionPerformed --IncomingRequest");

        if (jComboBox1.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(userProcessContainer, "Please Select a Doctor");
            return;
        }
        if (jComboBox2.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(userProcessContainer, "Please select a Location");
            return;
        }
        if (jTextField1.getText().length() == 0) {
            JOptionPane.showMessageDialog(userProcessContainer, "Please enter HRN");
            return;
        }
        for (Patient pat : enterprise.getPatientDirectory().getPatientList()) {
            if (pat.getPatientHRN().equals(jTextField1.getText())) {
                JOptionPane.showMessageDialog(userProcessContainer, "HRN already exist");
                return;
            }
        }
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow >= 0) {
            Patient patient = (Patient) jTable1.getValueAt(selectedRow, 0);
            String emp = jComboBox1.getSelectedItem().toString();
            ArrayList<Organization> org = enterprise.getOrganizationDirectory().getOrganizationList();
            for (Organization o : org) {
                if (o.getName().equals("Doctor Organization")) {
                    for (Employee e : o.getEmployeeDirectory().getEmployeeList()) {
                        if (e.getName().equals(emp)) {
                            String locs = jComboBox2.getSelectedItem().toString();
                            for (Location loc : enterprise.getLocationList().getLocationList()) {
                                if (loc.getName().equals(locs)) {
                                    if (loc.getNurseList().size() == 0) {
                                        JOptionPane.showMessageDialog(userProcessContainer, "Currently nurse is not available in this location");
                                        return;
                                    }
                                    if (loc.getMax() >= (loc.getCounter() + 1)) {
                                        Patient newPatient = enterprise.getPatientDirectory().addPatient();
                                        newPatient.setDoctor(e);
                                        newPatient.setLocation(loc);
                                        newPatient.setPatientName(patient.getPatientName());
                                        newPatient.setPatientHRN(jTextField1.getText());
                                        newPatient.setAllergies(patient.getAllergies());
                                        newPatient.setBloodGroup(patient.getBloodGroup());
                                        newPatient.setMedList(patient.getMedList());
                                        loc.setCounter(loc.getCounter() + 1);
                                        JOptionPane.showMessageDialog(userProcessContainer, "In patient Admitted");

                                        for (WorkRequest req : enterprise.getWorkQueue().getWorkRequestList()) {
                                            if (req.getClass().getName().contains("TransportWorkRequest")) {
                                                if (((TransportWorkRequest) req).getTransferPatient().getPatientName().
                                                        equals(patient.getPatientName())) {
                                                    enterprise.getWorkQueue().getWorkRequestList().remove(req);
                                                    break;
                                                }
                                            }
                                        }
                                        new Thread(new Runnable() {
                                            public void run() {
                                                try {
                                                    SendMail.sendMail(enterprise.getMailID(), "Hi, Transfer Patient Admission Alert \n\n"
                                                            + "Patient Name : " + newPatient.getPatientName() + "\nPatient HRN : "
                                                            + newPatient.getPatientHRN()
                                                            + "\nBlood Group : " + newPatient.getBloodGroup()
                                                            + "\nDoctor : " + e.getName()
                                                            + "\nLocation : " + loc.getName(), newPatient.getPatientHRN());
                                                } catch (MessagingException ex) {
                                                    Logger.getLogger(CreatePatientJPanel.class.getName()).log(Level.SEVERE, null, ex);
                                                }
                                            }
                                        }).start();
                                        populateTable();

                                        return;
                                    } else {
                                        JOptionPane.showMessageDialog(userProcessContainer, loc.getName()
                                                + " is already full");
                                        return;
                                    }

                                }
                            }
                        }
                    }
                }
            }

        } else {
            JOptionPane.showMessageDialog(userProcessContainer, "Please select a patient");
            return;
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
