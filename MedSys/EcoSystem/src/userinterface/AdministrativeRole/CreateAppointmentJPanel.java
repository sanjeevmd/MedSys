/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.AdministrativeRole;

import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Location.Location;
import Business.Organization.Organization;
import Business.Organization.OrganizationDirectory;
import Business.Patients.Patient;
import Business.Role.Role;
import Business.UserAccount.UserAccount;
import Business.UserAccount.UserAccountDirectory;
import static Logger.Logger.logger;
import Mail.SendMail;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.MessagingException;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sanjeev MD
 */
public class CreateAppointmentJPanel extends javax.swing.JPanel {

    private Enterprise enterprise;
    private JPanel userProcessContainer;

    /**
     * Creates new form CreateAppointmentJPanel
     */
    public CreateAppointmentJPanel(JPanel userProcessContainer, Enterprise enterprise) {
        logger.log(Level.INFO, "CreateAppointmentJPanel");

        initComponents();
        this.enterprise = enterprise;
        this.userProcessContainer = userProcessContainer;
        populateComboBox();
    }

    public void populateComboBox() {
        logger.log(Level.INFO, "populateComboBox --CreateAppointmentJPanel");

        OrganizationDirectory org = enterprise.getOrganizationDirectory();

        for (Organization o : org.getOrganizationList()) {
            if (o.getName().equals("Doctor Organization")) {
                for (Employee u : o.getEmployeeDirectory().getEmployeeList()) {
                    Doctorlist.addItem(u.toString());
                }
            }
        }
        for (Location loc : enterprise.getLocationList().getLocationList()) {
            locationCombobox.addItem(loc.getName());
        }

    }

    public void populateTable(String search) {
        logger.log(Level.INFO, "populateTable --CreateAppointmentJPanel");

        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        dtm.setRowCount(0);
        for (Patient pat : enterprise.getPatientDirectory().getPatientList()) {
            if (pat.getPatientName().startsWith(search)) {
                Object row[] = new Object[2];
                row[0] = pat;
                row[1] = pat.getPatientHRN();
                dtm.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bookAppointment = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        BackJButton = new javax.swing.JButton();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        txtSearch = new javax.swing.JTextField();
        lblPatient = new javax.swing.JLabel();
        lblDoctor = new javax.swing.JLabel();
        Doctorlist = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        locationCombobox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bookAppointment.setText("Admit");
        bookAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookAppointmentActionPerformed(evt);
            }
        });
        add(bookAppointment, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 20, -1, -1));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "HRN"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 330, 600, 180));

        BackJButton.setText("Back");
        BackJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackJButtonActionPerformed(evt);
            }
        });
        add(BackJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 16, -1, -1));

        jLayeredPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lblPatient.setText("Patient Name");

        lblDoctor.setText("Doctor");

        Doctorlist.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Doctor" }));

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        locationCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Location" }));

        jLabel1.setText("Location");

        jLayeredPane1.setLayer(txtSearch, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(lblPatient, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(lblDoctor, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(Doctorlist, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(locationCombobox, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDoctor)
                    .addComponent(jLabel1))
                .addGap(39, 39, 39)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Doctorlist, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(locationCombobox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(70, 70, 70))
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lblPatient)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(25, 25, 25))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                .addGap(0, 9, Short.MAX_VALUE)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPatient)
                    .addComponent(jButton1))
                .addGap(29, 29, 29)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDoctor)
                    .addComponent(Doctorlist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(locationCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40))
        );

        add(jLayeredPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 100, 380, 170));
    }// </editor-fold>//GEN-END:initComponents

    private void bookAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookAppointmentActionPerformed
        // TODO add your handling code here:
        logger.log(Level.INFO, "bookAppointmentActionPerformed --CreateAppointmentJPanel");

        if (Doctorlist.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(userProcessContainer, "Please Select a Doctor");
            return;
        }
        if (locationCombobox.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(userProcessContainer, "Please select a Location");
            return;
        }

        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow >= 0) {
            Patient patient = (Patient) jTable1.getValueAt(selectedRow, 0);
            if (patient.getDoctor() != null) {
                JOptionPane.showMessageDialog(userProcessContainer, "Patient is already admitted and assigned to " + patient.getDoctor().getName());
                return;
            }
            String emp = Doctorlist.getSelectedItem().toString();
            ArrayList<Organization> org = enterprise.getOrganizationDirectory().getOrganizationList();
            for (Organization o : org) {
                if (o.getName().equals("Doctor Organization")) {
                    for (Employee e : o.getEmployeeDirectory().getEmployeeList()) {
                        if (e.getName().equals(emp)) {
                            String locs = locationCombobox.getSelectedItem().toString();
                            for (Location loc : enterprise.getLocationList().getLocationList()) {
                                if (loc.getName().equals(locs)) {
                                    if (loc.getNurseList().size() == 0) {
                                        JOptionPane.showMessageDialog(userProcessContainer, "Currently nurse is not available in this location");
                                        return;
                                    }
                                    if (loc.getMax() >= (loc.getCounter() + 1)) {
                                        patient.setDoctor(e);
                                        patient.setLocation(loc);
                                        loc.setCounter(loc.getCounter() + 1);
                                        patient.setIsDischarged(false);
                                        JOptionPane.showMessageDialog(userProcessContainer, "In patient Admitted");
                                        new Thread(new Runnable() {
                                            public void run() {
                                                try {
                                                    SendMail.sendMail(enterprise.getMailID(), "Hi, Patient Admission Alert \n\n"
                                                            + "Patient Name : " + patient.getPatientName() + "\nPatient HRN : "
                                                            + patient.getPatientHRN()
                                                            + "\nBlood Group : " + patient.getBloodGroup()
                                                            + "\nDoctor : " + e.getName()
                                                            + "\nLocation : " + loc.getName(), patient.getPatientHRN());
                                                } catch (MessagingException ex) {
                                                    Logger.getLogger(CreatePatientJPanel.class.getName()).log(Level.SEVERE, null, ex);
                                                }
                                            }
                                        }).start();

                                        return;
                                    } else {
                                        JOptionPane.showMessageDialog(userProcessContainer, loc.getName()
                                                + " is already full");
                                        return;
                                    }

                                }
                            }
                        }
                    }
                }
            }

        } else {
            JOptionPane.showMessageDialog(userProcessContainer, "Please select a patient");
            return;
        }
    }//GEN-LAST:event_bookAppointmentActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        logger.log(Level.INFO, "jButton1ActionPerformed --CreateAppointmentJPanel");

        this.populateTable(txtSearch.getText());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void BackJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackJButtonActionPerformed
        // TODO add your handling code here:
        logger.log(Level.INFO, "BackJButtonActionPerformed --CreateAppointmentJPanel");

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_BackJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackJButton;
    private javax.swing.JComboBox<String> Doctorlist;
    private javax.swing.JButton bookAppointment;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblDoctor;
    private javax.swing.JLabel lblPatient;
    private javax.swing.JComboBox<String> locationCombobox;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
